import { four } from './four'

describe('cleverpush() has has two Params: ParamOne = Array of dynamic Rules, ParamTwo = length value for the FizzBuzz-Array', () => {
  it('it should return an Array of 30 items, each item-value is defined by the following three rules: ==> DivisibleBy 3=Clever, 5=Push, 13=ExtraThirdRule ', () => {
    const input = four.cleverpush(
      [
        four.mkRule(3, 'Clever'),
        four.mkRule(5, 'Push'),
        four.mkRule(13, 'ExtraThirdRule'),
      ],
      30,
    )

    const output = [
      '1',
      '2',
      '3  Clever',
      '4',
      '5  Push',
      '6  Clever',
      '7',
      '8',
      '9  Clever',
      '10  Push',
      '11',
      '12  Clever',
      '13  ExtraThirdRule',
      '14',
      '15  CleverPush',
      '16',
      '17',
      '18  Clever',
      '19',
      '20  Push',
      '21  Clever',
      '22',
      '23',
      '24  Clever',
      '25  Push',
      '26  ExtraThirdRule',
      '27  Clever',
      '28',
      '29',
    ]

    expect(input).toEqual(output)
  })
  it('it should return an Array of 100 items, each item-value is defined by the following FOUR rules: ==> DivisibleBy: 3=Clever,5=Push,13=ExtraThirdRule ,23=ExtraRuleNumberFour', () => {
    const input = four.cleverpush(
      [
        four.mkRule(3, 'Clever'),
        four.mkRule(5, 'Push'),
        four.mkRule(13, 'ExtraThirdRule'),
        four.mkRule(23, 'ExtraRuleNumberFour'),
      ],
      100,
    )

    const output = [
      '1',
      '2',
      '3  Clever',
      '4',
      '5  Push',
      '6  Clever',
      '7',
      '8',
      '9  Clever',
      '10  Push',
      '11',
      '12  Clever',
      '13  ExtraThirdRule',
      '14',
      '15  CleverPush',
      '16',
      '17',
      '18  Clever',
      '19',
      '20  Push',
      '21  Clever',
      '22',
      '23  ExtraRuleNumberFour',
      '24  Clever',
      '25  Push',
      '26  ExtraThirdRule',
      '27  Clever',
      '28',
      '29',
      '30  CleverPush',
      '31',
      '32',
      '33  Clever',
      '34',
      '35  Push',
      '36  Clever',
      '37',
      '38',
      '39  CleverExtraThirdRule',
      '40  Push',
      '41',
      '42  Clever',
      '43',
      '44',
      '45  CleverPush',
      '46  ExtraRuleNumberFour',
      '47',
      '48  Clever',
      '49',
      '50  Push',
      '51  Clever',
      '52  ExtraThirdRule',
      '53',
      '54  Clever',
      '55  Push',
      '56',
      '57  Clever',
      '58',
      '59',
      '60  CleverPush',
      '61',
      '62',
      '63  Clever',
      '64',
      '65  PushExtraThirdRule',
      '66  Clever',
      '67',
      '68',
      '69  CleverExtraRuleNumberFour',
      '70  Push',
      '71',
      '72  Clever',
      '73',
      '74',
      '75  CleverPush',
      '76',
      '77',
      '78  CleverExtraThirdRule',
      '79',
      '80  Push',
      '81  Clever',
      '82',
      '83',
      '84  Clever',
      '85  Push',
      '86',
      '87  Clever',
      '88',
      '89',
      '90  CleverPush',
      '91  ExtraThirdRule',
      '92  ExtraRuleNumberFour',
      '93  Clever',
      '94',
      '95  Push',
      '96  Clever',
      '97',
      '98',
      '99  Clever',
    ]

    expect(input).toEqual(output)
  })
})
